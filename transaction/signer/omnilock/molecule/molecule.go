// Generated by Molecule 0.7.3
// Generated by Moleculec-Go 0.1.10

package molecule

import (
	"bytes"
	"encoding/binary"
	"errors"
	"strconv"
	"strings"
)

type Number uint32

const HeaderSizeUint uint32 = 4

// Byte is the primitive type
type Byte [1]byte

func NewByte(b byte) Byte {
	return Byte([1]byte{b})
}
func ByteDefault() Byte {
	return Byte([1]byte{0})
}
func ByteFromSliceUnchecked(slice []byte) *Byte {
	b := new(Byte)
	b[0] = slice[0]
	return b
}
func (b *Byte) AsSlice() []byte {
	return b[:]
}
func ByteFromSlice(slice []byte, _compatible bool) (*Byte, error) {
	if len(slice) != 1 {
		return nil, errors.New("TotalSizeNotMatch")
	}
	b := new(Byte)
	b[0] = slice[0]
	return b, nil
}
func unpackNumber(b []byte) Number {
	bytesBuffer := bytes.NewBuffer(b)
	var x Number
	binary.Read(bytesBuffer, binary.LittleEndian, &x)
	return x
}
func packNumber(num Number) []byte {
	b := make([]byte, 4)
	binary.LittleEndian.PutUint32(b, uint32(num))
	return b
}

type BytesBuilder struct {
	inner []Byte
}

func (s *BytesBuilder) Build() Bytes {
	size := packNumber(Number(len(s.inner)))

	b := new(bytes.Buffer)

	b.Write(size)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	sb := Bytes{inner: b.Bytes()}

	return sb
}

func (s *BytesBuilder) Set(v []Byte) *BytesBuilder {
	s.inner = v
	return s
}
func (s *BytesBuilder) Push(v Byte) *BytesBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *BytesBuilder) Extend(iter []Byte) *BytesBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}
func (s *BytesBuilder) Replace(index uint, v Byte) *Byte {
	if uint(len(s.inner)) > index {
		a := s.inner[index]
		s.inner[index] = v
		return &a
	}
	return nil
}

func NewBytesBuilder() *BytesBuilder {
	return &BytesBuilder{[]Byte{}}
}

type Bytes struct {
	inner []byte
}

func BytesFromSliceUnchecked(slice []byte) *Bytes {
	return &Bytes{inner: slice}
}
func (s *Bytes) AsSlice() []byte {
	return s.inner
}

func BytesDefault() Bytes {
	return *BytesFromSliceUnchecked([]byte{0, 0, 0, 0})
}

func BytesFromSlice(slice []byte, _compatible bool) (*Bytes, error) {
	sliceLen := len(slice)
	if sliceLen < int(HeaderSizeUint) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Bytes", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := unpackNumber(slice)
	if itemCount == 0 {
		if sliceLen != int(HeaderSizeUint) {
			errMsg := strings.Join([]string{"TotalSizeNotMatch", "Bytes", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(HeaderSizeUint))}, " ")
			return nil, errors.New(errMsg)
		}
		return &Bytes{inner: slice}, nil
	}
	totalSize := int(HeaderSizeUint) + int(1*itemCount)
	if sliceLen != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Bytes", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}
	return &Bytes{inner: slice}, nil
}

func (s *Bytes) TotalSize() uint {
	return uint(HeaderSizeUint) + 1*s.ItemCount()
}
func (s *Bytes) ItemCount() uint {
	number := uint(unpackNumber(s.inner))
	return number
}
func (s *Bytes) Len() uint {
	return s.ItemCount()
}
func (s *Bytes) IsEmpty() bool {
	return s.Len() == 0
}

// if *Byte is nil, index is out of bounds
func (s *Bytes) Get(index uint) *Byte {
	var re *Byte
	if index < s.Len() {
		start := uint(HeaderSizeUint) + 1*index
		end := start + 1
		re = ByteFromSliceUnchecked(s.inner[start:end])
	}
	return re
}

func (s *Bytes) RawData() []byte {
	return s.inner[HeaderSizeUint:]
}

func (s *Bytes) AsBuilder() BytesBuilder {
	size := s.ItemCount()
	t := NewBytesBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type BytesOptBuilder struct {
	isNone bool
	inner  Bytes
}

func NewBytesOptBuilder() *BytesOptBuilder {
	return &BytesOptBuilder{isNone: true, inner: BytesDefault()}
}
func (s *BytesOptBuilder) Set(v Bytes) *BytesOptBuilder {
	s.isNone = false
	s.inner = v
	return s
}
func (s *BytesOptBuilder) Build() BytesOpt {
	var ret BytesOpt
	if s.isNone {
		ret = BytesOpt{inner: []byte{}}
	} else {
		ret = BytesOpt{inner: s.inner.AsSlice()}
	}
	return ret
}

type BytesOpt struct {
	inner []byte
}

func BytesOptFromSliceUnchecked(slice []byte) *BytesOpt {
	return &BytesOpt{inner: slice}
}
func (s *BytesOpt) AsSlice() []byte {
	return s.inner
}

func BytesOptDefault() BytesOpt {
	return *BytesOptFromSliceUnchecked([]byte{})
}

func BytesOptFromSlice(slice []byte, compatible bool) (*BytesOpt, error) {
	if len(slice) == 0 {
		return &BytesOpt{inner: slice}, nil
	}

	_, err := BytesFromSlice(slice, compatible)
	if err != nil {
		return nil, err
	}
	return &BytesOpt{inner: slice}, nil
}

func (s *BytesOpt) IntoBytes() (*Bytes, error) {
	if s.IsNone() {
		return nil, errors.New("No data")
	}
	return BytesFromSliceUnchecked(s.AsSlice()), nil
}
func (s *BytesOpt) IsSome() bool {
	return len(s.inner) != 0
}
func (s *BytesOpt) IsNone() bool {
	return len(s.inner) == 0
}
func (s *BytesOpt) AsBuilder() BytesOptBuilder {
	var ret = NewBytesOptBuilder()
	if s.IsSome() {
		ret.Set(*BytesFromSliceUnchecked(s.AsSlice()))
	}
	return *ret
}

type SmtProofBuilder struct {
	inner []Byte
}

func (s *SmtProofBuilder) Build() SmtProof {
	size := packNumber(Number(len(s.inner)))

	b := new(bytes.Buffer)

	b.Write(size)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	sb := SmtProof{inner: b.Bytes()}

	return sb
}

func (s *SmtProofBuilder) Set(v []Byte) *SmtProofBuilder {
	s.inner = v
	return s
}
func (s *SmtProofBuilder) Push(v Byte) *SmtProofBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *SmtProofBuilder) Extend(iter []Byte) *SmtProofBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}
func (s *SmtProofBuilder) Replace(index uint, v Byte) *Byte {
	if uint(len(s.inner)) > index {
		a := s.inner[index]
		s.inner[index] = v
		return &a
	}
	return nil
}

func NewSmtProofBuilder() *SmtProofBuilder {
	return &SmtProofBuilder{[]Byte{}}
}

type SmtProof struct {
	inner []byte
}

func SmtProofFromSliceUnchecked(slice []byte) *SmtProof {
	return &SmtProof{inner: slice}
}
func (s *SmtProof) AsSlice() []byte {
	return s.inner
}

func SmtProofDefault() SmtProof {
	return *SmtProofFromSliceUnchecked([]byte{0, 0, 0, 0})
}

func SmtProofFromSlice(slice []byte, _compatible bool) (*SmtProof, error) {
	sliceLen := len(slice)
	if sliceLen < int(HeaderSizeUint) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "SmtProof", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := unpackNumber(slice)
	if itemCount == 0 {
		if sliceLen != int(HeaderSizeUint) {
			errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProof", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(HeaderSizeUint))}, " ")
			return nil, errors.New(errMsg)
		}
		return &SmtProof{inner: slice}, nil
	}
	totalSize := int(HeaderSizeUint) + int(1*itemCount)
	if sliceLen != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProof", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}
	return &SmtProof{inner: slice}, nil
}

func (s *SmtProof) TotalSize() uint {
	return uint(HeaderSizeUint) + 1*s.ItemCount()
}
func (s *SmtProof) ItemCount() uint {
	number := uint(unpackNumber(s.inner))
	return number
}
func (s *SmtProof) Len() uint {
	return s.ItemCount()
}
func (s *SmtProof) IsEmpty() bool {
	return s.Len() == 0
}

// if *Byte is nil, index is out of bounds
func (s *SmtProof) Get(index uint) *Byte {
	var re *Byte
	if index < s.Len() {
		start := uint(HeaderSizeUint) + 1*index
		end := start + 1
		re = ByteFromSliceUnchecked(s.inner[start:end])
	}
	return re
}

func (s *SmtProof) RawData() []byte {
	return s.inner[HeaderSizeUint:]
}

func (s *SmtProof) AsBuilder() SmtProofBuilder {
	size := s.ItemCount()
	t := NewSmtProofBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type SmtProofEntryBuilder struct {
	mask  Byte
	proof SmtProof
}

func (s *SmtProofEntryBuilder) Build() SmtProofEntry {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (2 + 1)
	offsets := make([]uint32, 0, 2)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.mask.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.proof.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.mask.AsSlice())
	b.Write(s.proof.AsSlice())
	return SmtProofEntry{inner: b.Bytes()}
}

func (s *SmtProofEntryBuilder) Mask(v Byte) *SmtProofEntryBuilder {
	s.mask = v
	return s
}

func (s *SmtProofEntryBuilder) Proof(v SmtProof) *SmtProofEntryBuilder {
	s.proof = v
	return s
}

func NewSmtProofEntryBuilder() *SmtProofEntryBuilder {
	return &SmtProofEntryBuilder{mask: ByteDefault(), proof: SmtProofDefault()}
}

type SmtProofEntry struct {
	inner []byte
}

func SmtProofEntryFromSliceUnchecked(slice []byte) *SmtProofEntry {
	return &SmtProofEntry{inner: slice}
}
func (s *SmtProofEntry) AsSlice() []byte {
	return s.inner
}

func SmtProofEntryDefault() SmtProofEntry {
	return *SmtProofEntryFromSliceUnchecked([]byte{17, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0})
}

func SmtProofEntryFromSlice(slice []byte, compatible bool) (*SmtProofEntry, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "SmtProofEntry", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProofEntry", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint && 2 == 0 {
		return &SmtProofEntry{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProofEntry", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "SmtProofEntry", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "SmtProofEntry", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 2 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 2 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = ByteFromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = SmtProofFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	return &SmtProofEntry{inner: slice}, nil
}

func (s *SmtProofEntry) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *SmtProofEntry) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *SmtProofEntry) Len() uint {
	return s.FieldCount()
}
func (s *SmtProofEntry) IsEmpty() bool {
	return s.Len() == 0
}
func (s *SmtProofEntry) CountExtraFields() uint {
	return s.FieldCount() - 2
}

func (s *SmtProofEntry) HasExtraFields() bool {
	return 2 != s.FieldCount()
}

func (s *SmtProofEntry) Mask() *Byte {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return ByteFromSliceUnchecked(s.inner[start:end])
}

func (s *SmtProofEntry) Proof() *SmtProof {
	var ret *SmtProof
	start := unpackNumber(s.inner[8:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[12:])
		ret = SmtProofFromSliceUnchecked(s.inner[start:end])
	} else {
		ret = SmtProofFromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *SmtProofEntry) AsBuilder() SmtProofEntryBuilder {
	ret := NewSmtProofEntryBuilder().Mask(*s.Mask()).Proof(*s.Proof())
	return *ret
}

type AuthBuilder struct {
	inner [21]Byte
}

func NewAuthBuilder() *AuthBuilder {
	return &AuthBuilder{inner: [21]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *AuthBuilder) Build() Auth {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Auth{inner: b.Bytes()}
}

func (s *AuthBuilder) Set(v [21]Byte) *AuthBuilder {
	s.inner = v
	return s
}

func (s *AuthBuilder) Nth0(v Byte) *AuthBuilder {
	s.inner[0] = v
	return s
}

func (s *AuthBuilder) Nth1(v Byte) *AuthBuilder {
	s.inner[1] = v
	return s
}

func (s *AuthBuilder) Nth2(v Byte) *AuthBuilder {
	s.inner[2] = v
	return s
}

func (s *AuthBuilder) Nth3(v Byte) *AuthBuilder {
	s.inner[3] = v
	return s
}

func (s *AuthBuilder) Nth4(v Byte) *AuthBuilder {
	s.inner[4] = v
	return s
}

func (s *AuthBuilder) Nth5(v Byte) *AuthBuilder {
	s.inner[5] = v
	return s
}

func (s *AuthBuilder) Nth6(v Byte) *AuthBuilder {
	s.inner[6] = v
	return s
}

func (s *AuthBuilder) Nth7(v Byte) *AuthBuilder {
	s.inner[7] = v
	return s
}

func (s *AuthBuilder) Nth8(v Byte) *AuthBuilder {
	s.inner[8] = v
	return s
}

func (s *AuthBuilder) Nth9(v Byte) *AuthBuilder {
	s.inner[9] = v
	return s
}

func (s *AuthBuilder) Nth10(v Byte) *AuthBuilder {
	s.inner[10] = v
	return s
}

func (s *AuthBuilder) Nth11(v Byte) *AuthBuilder {
	s.inner[11] = v
	return s
}

func (s *AuthBuilder) Nth12(v Byte) *AuthBuilder {
	s.inner[12] = v
	return s
}

func (s *AuthBuilder) Nth13(v Byte) *AuthBuilder {
	s.inner[13] = v
	return s
}

func (s *AuthBuilder) Nth14(v Byte) *AuthBuilder {
	s.inner[14] = v
	return s
}

func (s *AuthBuilder) Nth15(v Byte) *AuthBuilder {
	s.inner[15] = v
	return s
}

func (s *AuthBuilder) Nth16(v Byte) *AuthBuilder {
	s.inner[16] = v
	return s
}

func (s *AuthBuilder) Nth17(v Byte) *AuthBuilder {
	s.inner[17] = v
	return s
}

func (s *AuthBuilder) Nth18(v Byte) *AuthBuilder {
	s.inner[18] = v
	return s
}

func (s *AuthBuilder) Nth19(v Byte) *AuthBuilder {
	s.inner[19] = v
	return s
}

func (s *AuthBuilder) Nth20(v Byte) *AuthBuilder {
	s.inner[20] = v
	return s
}

type Auth struct {
	inner []byte
}

func AuthFromSliceUnchecked(slice []byte) *Auth {
	return &Auth{inner: slice}
}
func (s *Auth) AsSlice() []byte {
	return s.inner
}

func AuthDefault() Auth {
	return *AuthFromSliceUnchecked([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func AuthFromSlice(slice []byte, _compatible bool) (*Auth, error) {
	sliceLen := len(slice)
	if sliceLen != 21 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Auth", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(21)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Auth{inner: slice}, nil
}

func (s *Auth) RawData() []byte {
	return s.inner
}

func (s *Auth) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Auth) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Auth) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Auth) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Auth) Nth4() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[4:5])
	return ret
}

func (s *Auth) Nth5() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[5:6])
	return ret
}

func (s *Auth) Nth6() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[6:7])
	return ret
}

func (s *Auth) Nth7() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[7:8])
	return ret
}

func (s *Auth) Nth8() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[8:9])
	return ret
}

func (s *Auth) Nth9() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[9:10])
	return ret
}

func (s *Auth) Nth10() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[10:11])
	return ret
}

func (s *Auth) Nth11() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[11:12])
	return ret
}

func (s *Auth) Nth12() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[12:13])
	return ret
}

func (s *Auth) Nth13() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[13:14])
	return ret
}

func (s *Auth) Nth14() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[14:15])
	return ret
}

func (s *Auth) Nth15() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[15:16])
	return ret
}

func (s *Auth) Nth16() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[16:17])
	return ret
}

func (s *Auth) Nth17() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[17:18])
	return ret
}

func (s *Auth) Nth18() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[18:19])
	return ret
}

func (s *Auth) Nth19() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[19:20])
	return ret
}

func (s *Auth) Nth20() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[20:21])
	return ret
}

func (s *Auth) AsBuilder() AuthBuilder {
	t := NewAuthBuilder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	t.Nth4(*s.Nth4())
	t.Nth5(*s.Nth5())
	t.Nth6(*s.Nth6())
	t.Nth7(*s.Nth7())
	t.Nth8(*s.Nth8())
	t.Nth9(*s.Nth9())
	t.Nth10(*s.Nth10())
	t.Nth11(*s.Nth11())
	t.Nth12(*s.Nth12())
	t.Nth13(*s.Nth13())
	t.Nth14(*s.Nth14())
	t.Nth15(*s.Nth15())
	t.Nth16(*s.Nth16())
	t.Nth17(*s.Nth17())
	t.Nth18(*s.Nth18())
	t.Nth19(*s.Nth19())
	t.Nth20(*s.Nth20())
	return *t
}

type SmtProofEntryVecBuilder struct {
	inner []SmtProofEntry
}

func (s *SmtProofEntryVecBuilder) Build() SmtProofEntryVec {
	itemCount := len(s.inner)

	b := new(bytes.Buffer)

	// Empty dyn vector, just return size's bytes
	if itemCount == 0 {
		b.Write(packNumber(Number(HeaderSizeUint)))
		return SmtProofEntryVec{inner: b.Bytes()}
	}

	// Calculate first offset then loop for rest items offsets
	totalSize := HeaderSizeUint * uint32(itemCount+1)
	offsets := make([]uint32, 0, itemCount)
	offsets = append(offsets, totalSize)
	for i := 1; i < itemCount; i++ {
		totalSize += uint32(len(s.inner[i-1].AsSlice()))
		offsets = append(offsets, offsets[i-1]+uint32(len(s.inner[i-1].AsSlice())))
	}
	totalSize += uint32(len(s.inner[itemCount-1].AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < itemCount; i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	for i := 0; i < itemCount; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	return SmtProofEntryVec{inner: b.Bytes()}
}

func (s *SmtProofEntryVecBuilder) Set(v []SmtProofEntry) *SmtProofEntryVecBuilder {
	s.inner = v
	return s
}
func (s *SmtProofEntryVecBuilder) Push(v SmtProofEntry) *SmtProofEntryVecBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *SmtProofEntryVecBuilder) Extend(iter []SmtProofEntry) *SmtProofEntryVecBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}
func (s *SmtProofEntryVecBuilder) Replace(index uint, v SmtProofEntry) *SmtProofEntry {
	if uint(len(s.inner)) > index {
		a := s.inner[index]
		s.inner[index] = v
		return &a
	}
	return nil
}

func NewSmtProofEntryVecBuilder() *SmtProofEntryVecBuilder {
	return &SmtProofEntryVecBuilder{[]SmtProofEntry{}}
}

type SmtProofEntryVec struct {
	inner []byte
}

func SmtProofEntryVecFromSliceUnchecked(slice []byte) *SmtProofEntryVec {
	return &SmtProofEntryVec{inner: slice}
}
func (s *SmtProofEntryVec) AsSlice() []byte {
	return s.inner
}

func SmtProofEntryVecDefault() SmtProofEntryVec {
	return *SmtProofEntryVecFromSliceUnchecked([]byte{4, 0, 0, 0})
}

func SmtProofEntryVecFromSlice(slice []byte, compatible bool) (*SmtProofEntryVec, error) {
	sliceLen := len(slice)

	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "SmtProofEntryVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProofEntryVec", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint {
		return &SmtProofEntryVec{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "SmtProofEntryVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "SmtProofEntryVec", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "SmtProofEntryVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := uint32(offsetFirst)/HeaderSizeUint - 1

	offsets := make([]uint32, itemCount)

	for i := 0; i < int(itemCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}

	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			errMsg := strings.Join([]string{"OffsetsNotMatch", "SmtProofEntryVec"}, " ")
			return nil, errors.New(errMsg)
		}
	}

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 {
			start := offsets[i-1]
			end := offsets[i]
			_, err := SmtProofEntryFromSlice(slice[start:end], compatible)

			if err != nil {
				return nil, err
			}
		}
	}

	return &SmtProofEntryVec{inner: slice}, nil
}

func (s *SmtProofEntryVec) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *SmtProofEntryVec) ItemCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *SmtProofEntryVec) Len() uint {
	return s.ItemCount()
}
func (s *SmtProofEntryVec) IsEmpty() bool {
	return s.Len() == 0
}

// if *SmtProofEntry is nil, index is out of bounds
func (s *SmtProofEntryVec) Get(index uint) *SmtProofEntry {
	var b *SmtProofEntry
	if index < s.Len() {
		start_index := uint(HeaderSizeUint) * (1 + index)
		start := unpackNumber(s.inner[start_index:])

		if index == s.Len()-1 {
			b = SmtProofEntryFromSliceUnchecked(s.inner[start:])
		} else {
			end_index := start_index + uint(HeaderSizeUint)
			end := unpackNumber(s.inner[end_index:])
			b = SmtProofEntryFromSliceUnchecked(s.inner[start:end])
		}
	}
	return b
}

func (s *SmtProofEntryVec) AsBuilder() SmtProofEntryVecBuilder {
	size := s.ItemCount()
	t := NewSmtProofEntryVecBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type IdentityBuilder struct {
	identity Auth
	proofs   SmtProofEntryVec
}

func (s *IdentityBuilder) Build() Identity {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (2 + 1)
	offsets := make([]uint32, 0, 2)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.identity.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.proofs.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.identity.AsSlice())
	b.Write(s.proofs.AsSlice())
	return Identity{inner: b.Bytes()}
}

func (s *IdentityBuilder) Identity(v Auth) *IdentityBuilder {
	s.identity = v
	return s
}

func (s *IdentityBuilder) Proofs(v SmtProofEntryVec) *IdentityBuilder {
	s.proofs = v
	return s
}

func NewIdentityBuilder() *IdentityBuilder {
	return &IdentityBuilder{identity: AuthDefault(), proofs: SmtProofEntryVecDefault()}
}

type Identity struct {
	inner []byte
}

func IdentityFromSliceUnchecked(slice []byte) *Identity {
	return &Identity{inner: slice}
}
func (s *Identity) AsSlice() []byte {
	return s.inner
}

func IdentityDefault() Identity {
	return *IdentityFromSliceUnchecked([]byte{37, 0, 0, 0, 12, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0})
}

func IdentityFromSlice(slice []byte, compatible bool) (*Identity, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Identity", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Identity", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint && 2 == 0 {
		return &Identity{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Identity", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "Identity", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Identity", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 2 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 2 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = AuthFromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = SmtProofEntryVecFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	return &Identity{inner: slice}, nil
}

func (s *Identity) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *Identity) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *Identity) Len() uint {
	return s.FieldCount()
}
func (s *Identity) IsEmpty() bool {
	return s.Len() == 0
}
func (s *Identity) CountExtraFields() uint {
	return s.FieldCount() - 2
}

func (s *Identity) HasExtraFields() bool {
	return 2 != s.FieldCount()
}

func (s *Identity) Identity() *Auth {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return AuthFromSliceUnchecked(s.inner[start:end])
}

func (s *Identity) Proofs() *SmtProofEntryVec {
	var ret *SmtProofEntryVec
	start := unpackNumber(s.inner[8:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[12:])
		ret = SmtProofEntryVecFromSliceUnchecked(s.inner[start:end])
	} else {
		ret = SmtProofEntryVecFromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *Identity) AsBuilder() IdentityBuilder {
	ret := NewIdentityBuilder().Identity(*s.Identity()).Proofs(*s.Proofs())
	return *ret
}

type IdentityOptBuilder struct {
	isNone bool
	inner  Identity
}

func NewIdentityOptBuilder() *IdentityOptBuilder {
	return &IdentityOptBuilder{isNone: true, inner: IdentityDefault()}
}
func (s *IdentityOptBuilder) Set(v Identity) *IdentityOptBuilder {
	s.isNone = false
	s.inner = v
	return s
}
func (s *IdentityOptBuilder) Build() IdentityOpt {
	var ret IdentityOpt
	if s.isNone {
		ret = IdentityOpt{inner: []byte{}}
	} else {
		ret = IdentityOpt{inner: s.inner.AsSlice()}
	}
	return ret
}

type IdentityOpt struct {
	inner []byte
}

func IdentityOptFromSliceUnchecked(slice []byte) *IdentityOpt {
	return &IdentityOpt{inner: slice}
}
func (s *IdentityOpt) AsSlice() []byte {
	return s.inner
}

func IdentityOptDefault() IdentityOpt {
	return *IdentityOptFromSliceUnchecked([]byte{})
}

func IdentityOptFromSlice(slice []byte, compatible bool) (*IdentityOpt, error) {
	if len(slice) == 0 {
		return &IdentityOpt{inner: slice}, nil
	}

	_, err := IdentityFromSlice(slice, compatible)
	if err != nil {
		return nil, err
	}
	return &IdentityOpt{inner: slice}, nil
}

func (s *IdentityOpt) IntoIdentity() (*Identity, error) {
	if s.IsNone() {
		return nil, errors.New("No data")
	}
	return IdentityFromSliceUnchecked(s.AsSlice()), nil
}
func (s *IdentityOpt) IsSome() bool {
	return len(s.inner) != 0
}
func (s *IdentityOpt) IsNone() bool {
	return len(s.inner) == 0
}
func (s *IdentityOpt) AsBuilder() IdentityOptBuilder {
	var ret = NewIdentityOptBuilder()
	if s.IsSome() {
		ret.Set(*IdentityFromSliceUnchecked(s.AsSlice()))
	}
	return *ret
}

type OmniLockWitnessLockBuilder struct {
	signature     BytesOpt
	omni_identity IdentityOpt
	preimage      BytesOpt
}

func (s *OmniLockWitnessLockBuilder) Build() OmniLockWitnessLock {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (3 + 1)
	offsets := make([]uint32, 0, 3)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.signature.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.omni_identity.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.preimage.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.signature.AsSlice())
	b.Write(s.omni_identity.AsSlice())
	b.Write(s.preimage.AsSlice())
	return OmniLockWitnessLock{inner: b.Bytes()}
}

func (s *OmniLockWitnessLockBuilder) Signature(v BytesOpt) *OmniLockWitnessLockBuilder {
	s.signature = v
	return s
}

func (s *OmniLockWitnessLockBuilder) OmniIdentity(v IdentityOpt) *OmniLockWitnessLockBuilder {
	s.omni_identity = v
	return s
}

func (s *OmniLockWitnessLockBuilder) Preimage(v BytesOpt) *OmniLockWitnessLockBuilder {
	s.preimage = v
	return s
}

func NewOmniLockWitnessLockBuilder() *OmniLockWitnessLockBuilder {
	return &OmniLockWitnessLockBuilder{signature: BytesOptDefault(), omni_identity: IdentityOptDefault(), preimage: BytesOptDefault()}
}

type OmniLockWitnessLock struct {
	inner []byte
}

func OmniLockWitnessLockFromSliceUnchecked(slice []byte) *OmniLockWitnessLock {
	return &OmniLockWitnessLock{inner: slice}
}
func (s *OmniLockWitnessLock) AsSlice() []byte {
	return s.inner
}

func OmniLockWitnessLockDefault() OmniLockWitnessLock {
	return *OmniLockWitnessLockFromSliceUnchecked([]byte{16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0})
}

func OmniLockWitnessLockFromSlice(slice []byte, compatible bool) (*OmniLockWitnessLock, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "OmniLockWitnessLock", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "OmniLockWitnessLock", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint && 3 == 0 {
		return &OmniLockWitnessLock{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "OmniLockWitnessLock", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "OmniLockWitnessLock", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "OmniLockWitnessLock", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 3 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 3 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = BytesOptFromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = IdentityOptFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = BytesOptFromSlice(slice[offsets[2]:offsets[3]], compatible)
	if err != nil {
		return nil, err
	}

	return &OmniLockWitnessLock{inner: slice}, nil
}

func (s *OmniLockWitnessLock) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *OmniLockWitnessLock) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *OmniLockWitnessLock) Len() uint {
	return s.FieldCount()
}
func (s *OmniLockWitnessLock) IsEmpty() bool {
	return s.Len() == 0
}
func (s *OmniLockWitnessLock) CountExtraFields() uint {
	return s.FieldCount() - 3
}

func (s *OmniLockWitnessLock) HasExtraFields() bool {
	return 3 != s.FieldCount()
}

func (s *OmniLockWitnessLock) Signature() *BytesOpt {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return BytesOptFromSliceUnchecked(s.inner[start:end])
}

func (s *OmniLockWitnessLock) OmniIdentity() *IdentityOpt {
	start := unpackNumber(s.inner[8:])
	end := unpackNumber(s.inner[12:])
	return IdentityOptFromSliceUnchecked(s.inner[start:end])
}

func (s *OmniLockWitnessLock) Preimage() *BytesOpt {
	var ret *BytesOpt
	start := unpackNumber(s.inner[12:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[16:])
		ret = BytesOptFromSliceUnchecked(s.inner[start:end])
	} else {
		ret = BytesOptFromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *OmniLockWitnessLock) AsBuilder() OmniLockWitnessLockBuilder {
	ret := NewOmniLockWitnessLockBuilder().Signature(*s.Signature()).OmniIdentity(*s.OmniIdentity()).Preimage(*s.Preimage())
	return *ret
}
